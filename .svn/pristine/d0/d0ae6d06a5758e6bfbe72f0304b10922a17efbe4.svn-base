var soap = require('soap');
var settings = require('../../settings');
var Time = require('./time');
var async = require('async');
var AUTH = require('../util/auth');


exports.preAuth = function(req,res){
	var data = req.body;
	// var data = req.query;
	try{
		var user = data.user;
		var password = data.password;
		var mac = data.mac;
		var wifiMac = data.wifiMac;
		var  ssid = data.ssid;
		if(!user || user == ''){
			return res.json({resultCode:'1',info:'用户不能为空'});
		}
		if(!password || password == ''){
			return res.json({resultCode:'1',info:'密码不能为空'});
		}
		if(!mac || mac == ''){
			return res.json({resultCode:'1',info:'mac地址不能为空'});
		}		
		if(!wifiMac || wifiMac == ''){
			return res.json({resultCode:'1',info:'wifimac地址不能为空'});
		}
		if(!ssid || ssid == ''){
			return res.json({resultCode:'1',info:'热点名称不能为空'});
		}
		var url = settings.url;
		soap.createClient(url,function(err,client){
			if(err){
				console.log(err);
    			console.log('*****************远程连接失败*****************');
    			return res.json({resultCode:'2',info:'连接远程服务器失败,请稍候重试'});
			}
			async.auto({
				qryBlacklist:function(callback){//查询黑名单
					//判断用户是否在黑名单
					var BlacklistData = {};
					BlacklistData.user = user;
					BlacklistData.client = client;
					AUTH.qryBlacklist(BlacklistData,function(err,flag){
						if(err){
							return res.json({resultCode:'1',info:'查询黑名单错误,请稍候重试'});
						}
						if(flag){
							callback(null,true);
						}else{
							return res.json({resultCode:'2',info:'用户在黑名单'});
						}
					});
				},
				qryUser:['qryBlacklist',function(callback,results){//查询用户
					var qryUserDate = {};
					qryUserDate.client = client;
					qryUserDate.user = user;
					AUTH.qryUser(qryUserDate,function(err,result){
						if(err){//判断是否查询成功
							return res.json({resultCode:'1',info:'查询用户失败,请稍候重试'});
						}
						if(result != null && result != ''){
							//判断用户状态
							if(result.statecode != '0'){
								return res.json({resultCode:'6',info:'对不起,用户已经停用'});
							}
							//判断用户密码
							if(result.new_userPssword != password){
								return res.json({resultCode:'13',info:'密码不正确'});
							}
							//判断用户是否限制mac地址
							var macFlag = result.new_man_opinion;
							if(macFlag == 'True'){//判断是否限制mac地址
								//判断数据库中mac地址与现在认证的mac地址是否一致
								var userMac = result.new_mac;
								if(userMac != '' && userMac != mac){//判断用户mac地址
									//可扩充
									//该处可以添加查询mac地址当月更改的次数
									// res.json({resultCode:'4',info:'mac地址与第一次使用的不同'});
									res.json({resultCode:'3',info:'mac地址与第一次使用的不同'});
								}else{
									callback(null,result);
								}
							}else{
								callback(null,result);
							}
						}else{
							callback(null,null);
						}
					});
				}],
				qryfactory:['qryBlacklist','qryUser',function(callback,result){//查询用户工厂
					var userData = result.qryUser;
					//判断用户和用户工厂是否为空
					if(userData == null || userData.new_jifei_factoryid == null || userData.new_jifei_factoryid == ''){//判断用户是否为空或者是否判断域
						var qryFac = {};
						qryFac.client = client;
						qryFac.wifiMac = wifiMac;
						AUTH.qryFactoryByMac(qryFac,function(err,result){
							if(err){
								return res.json({resultCode:'1',info:'查询工厂失败,请稍候重试'});
							}
							if(result == null || result == ''){
								return res.json({resultCode:'1',info:'查询工厂失败,请稍候重试'});
							}else{
								if(userData == null){
									//如果用户不存在，则创建用户
									var createUserData = {}; 
									createUserData.client = client;
									createUserData.user = user;
									createUserData.new_jifei_factoryid = result.new_jifei_factoryid;
									createUserData.password = password;
									AUTH.createUser(createUserData,function(err,result2){
										if(err){
											return res.json({resultCode:'1',info:'用户创建失败,请稍候重试'});
										}
										if(result2 == null){
											res.json({resultCode:'1',info:'用户创建失败,请稍候重试'});
										}else{
											console.log(result2);
											result.new_jifei_customerid = result2.new_jifei_customerid;
											callback(null,result);
										}
									});
								}else if(userData.new_jifei_factoryid == null || userData.new_jifei_factoryid == ''){
									//如果用户存在，则更新用户工厂信息
									var createUserData = {}; 
									createUserData.client = client;
									createUserData.new_jifei_customerid = userData.new_jifei_customerid;
									createUserData.new_jifei_factoryid = result.new_jifei_factoryid;
									AUTH.updUser(createUserData,function(err,result2){
										if(err){
											return res.json({resultCode:'1',info:'用户创建失败,请稍候重试'});
										}
										if(result2 == null){
											res.json({resultCode:'1',info:'更新用户工厂失败,请稍候重试'});
										}else{
											callback(result);
										}
									});
								}
							}
						});
					}else{
						//如果用户和用户工厂不为空
						var qryFacData = {};
						qryFacData.factoryid = userData.new_jifei_factoryid;
						qryFacData.client = client;
						AUTH.qryFactoryById(qryFacData,function(err,facInfo){
							if(err){
								return res.json({resultCode:'1',info:'查询工厂信息失败,请稍候重试'});
							}
							if(facInfo != null && facInfo != ''){
								callback(null,facInfo);
							}else{
								res.json({resultCode:'1',info:'查询工厂信息失败,请稍候重试'});
							}
						});
					}
				}],
				qryDomain:['qryBlacklist','qryUser','qryfactory',function(callback,results){
					//判断用户域
					var userInfo = results.qryUser;
					var factoryInfo = results.qryfactory;
					if(userInfo.new_region_opinion != null && userInfo.new_region_opinion == 'True'){
						var qryDomainData = {};
						qryDomainData.client = client;
						qryDomainData.ssid = ssid;
						AUTH.qryDomain(qryDomainData,function(err,domainInfo){
							if(err){
								return res.json({resultCode:'1',info:'查询域名失败,请稍候重试'});
							}
							if(domainInfo != null && domainInfo != ''){
								//判断帐号是否为联通
								if(userInfo.new_recordtype != 'False' && domainInfo.new_doman == 'CZXSJ'){
									if(userInfo.new_userPssword == password){
										res.json({resultCode:'0',info:'预认证成功'});
									}else{
										res.json({resultCode:'13',info:'密码不正确'});
									}
								}else{
									if(domainInfo.new_doman != null && userInfo.new_man_opinion != null && factoryInfo.new_jifei_factiondomain == domainInfo.new_doman){
										callback(null,true);
									}else{
										res.json({resultCode:'8',info:'不能跨域使用'});
									}
								}
							}else{
								return res.json({resultCode:'7',info:'ap热点的域不存在'});
							}
						});
					}else{
						callback(null,true);
					}
				}],
				qryUserOrder:['qryBlacklist','qryUser','qryfactory','qryDomain',function(callback,results){
					var userInfo = results.qryUser;
					var facInfo = results.qryfactory;
					var userId = '';
					if(userInfo != null){
						userId = userInfo.new_jifei_customerid;
					}else{
						userId = facInfo.new_jifei_customerid;
					}
					var orderData = {};
					orderData.userId = userId;
					orderData.client = client;
					AUTH.qryOrder(orderData,function(err,orderInfo){
						if(err){
							return res.json({resultCode:'1',info:'查询域名失败,请稍候重试'});
						}
						if(orderInfo != null && orderInfo != ''){
							//判断订单是否可用
							var startDate = Time.format(new Date(orderInfo.new_jifei_begintime),'yyyy-MM-dd');
							var startTime = new Date(startDate).getTime();
							var stopDate = Time.format(new Date(orderInfo.new_jifei_endtime),'yyyy-MM-dd')+' 23:59:59';
							var stopTime = new Date(stopDate).getTime();
							var nowTime = new Date().getTime();
							console.log(startTime+"：开始时间");
							console.log(stopTime+":结束时间");
							console.log(nowTime+":当前时间");
							if(nowTime>startTime && nowTime<stopTime){//判断用户订单是否开始启用并且订单是否过期
								callback(null,true);
							}else{
								callback(null,false);
							}
						}else{
							callback(null,false);
						}
					});
				}]
			},function(err,results){
				if(err){
					return res.json({resultCode:'1',info:'查询失败,请稍候重试'});
				}
				var facInfo = results.qryfactory;
				var orderInfo = results.qryUserOrder;
				var userInfo = results.qryUser;
				console.log(facInfo);
				console.log(userInfo);
				console.log(orderInfo);
				if(orderInfo){
					res.json({resultCode:'0',info:'预认证成功'});
				}else{
					if(userInfo != null && userInfo != '' && userInfo.new_type != '1'){
						res.json({resultCode:'5',info:'订单已经失效'});
					}else{
						var userId = '';
						if(userInfo != null && userInfo != ''){
							userId = userInfo.new_jifei_customerid;
						}else{
							userId = facInfo.new_jifei_customerid;
						}
						//如果订单不通过,查询工厂，判断工厂免费上网时长
						var now = Time.format(new Date(),'yyyy-MM-dd');
						var facStartDate1 = new Date(facInfo.new_strdate);
						var facStartDate4 = new Date(Date.UTC(facStartDate1.getFullYear(),facStartDate1.getMonth(),facStartDate1.getDate(),facStartDate1.getHours(),facStartDate1.getMinutes(), facStartDate1.getSeconds()));
						var facStartDate2 = Time.format(facStartDate4,'yyyy-MM-dd');
						var facStartDate3 = now+" "+Time.format(facStartDate4,'HH:mm:ss');
						var facStartTime1 = new Date(facStartDate2).getTime();
						var facStartTime2 = new Date(facStartDate3).getTime();
						console.log(facStartTime2);
						var facStopDate1 = new Date(facInfo.new_enddate);
						var facStopDate4 = new Date(Date.UTC(facStopDate1.getFullYear(),facStopDate1.getMonth(),facStopDate1.getDate(),facStopDate1.getHours(),facStopDate1.getMinutes(), facStopDate1.getSeconds()));
						var facStopDate2 = Time.format(facStopDate4,'yyyy-MM-dd');
						var facStopDate3 = now+' '+Time.format(facStopDate4,'HH:mm:ss');
						var facStopTime1 = new Date(facStopDate1).getTime();
						var facStopTime2 = new Date(facStopDate2).getTime();
						console.log(facStopDate3);
						var nowTime1 = new Date(Time.format(new Date(),'yyyy-MM-dd')).getTime();
						var nowTime2 = new Date().getTime();
						console.log(nowTime2);
						if(nowTime1 > facStartTime1 && 
							nowTime2 > facStartTime2 && 
							nowTime1 < facStopTime1 &&
							nowTime2 < facStopTime2){
							var historyData = {};
							historyData.client = client;
							historyData.userId = userId;
							AUTH.qryDuration(historyData,function(err,flag){
								if(err){
									return res.json({resultCode:'1',info:'预认证失败，请稍后重试'});
								}
								if(flag){
									res.json({resultCode:'10',info:'用户可以免费上网'});
								}else{
									res.json({resultCode:'11',info:'用户当天已经免费上网超过一小时'});
								}
							});
						}else{
							res.json({resultCode:'12',info:'不在工厂的免费体验时间段之内'});
						}
					}
				}
			});
		});
	}catch(e){
		console.log(e);
		console.log('********************处理参数异常*******************88');
		res.json({resultCode:'1',info:'服务器忙，请重试'});
	}
}